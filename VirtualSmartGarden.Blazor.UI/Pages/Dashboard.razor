@page "/dashboard"
@using System.Timers

@inject IJSRuntime JS

@using VirtualSmartGarden.Blazor.UI.Dtos
@using VirtualSmartGarden.Blazor.UI.Enums
@using VirtualSmartGarden.Blazor.UI.Extensions
@using VirtualSmartGarden.Blazor.UI.Interfaces
@inject ISensorDataService _sensorService

<div class="container py-3" style="min-width: 680px;">

    <div class="d-flex flex-wrap align-items-center justify-content-between mb-4">
        <div class="me-3 fs-5 fw-semibold" style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
            @currentDateTime.ToString("dd/MM/yyyy HH:mm:ss")
        </div>

        <div class="d-flex flex-wrap align-items-center gap-2">
            <input class="form-control" style="min-width: 250px;" type="text" placeholder="Αναζήτηση..." @bind="searchText" />

            <select class="form-select" style="min-width: 180px;" @bind="selectedSearchType">
                @foreach (var option in searchOptions)
                {
                    <option value="@option">@option.GetDescription()</option>
                }
            </select>
        </div>
    </div>

    @if (groupedData is null)
    {
        <div class="spinner-grow text-success bg-success ms-4" role="status">
            <span class="visually-hidden">Loading...</span>
            <p class="loading-p"><em class="loading-em"  style="padding-left:40px">Loading...</em></p>
        </div>
    }
    else
    {
        @foreach (var group in groupedData)
        {
            var groupId = group.Key;
            var readings = group.Value;

            <div class="d-flex mb-4" style="width: 100%; border-radius:8px; overflow:hidden; box-shadow: 0 0 8px rgba(0,0,0,0.15); min-width:675px;">

               
                <div class="flex-grow-1" style="background-color:#0556ad; padding:15px; color:white; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 14px; overflow-y:auto;">
                    <div class="card mb-0 shadow-sm border-primary bg-primary text-white" style="height: 100%;">
                        <div class="card-header bg-dark text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">Group ID: @groupId</h6>
                                <span class="text-light small">
                                    First Reading: @readings.Min(x => x.Timestamp).ToString("f")
                                </span>
                            </div>
                        </div>
                        <div class="card-body p-1" style="overflow-y:auto;">
                            <table class="table table-striped table-bordered table-hover mb-0" style="font-size: 0.75rem;">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Sensor</th>
                                        <th class="text-end">Value</th>
                                        <th class="text-end">Unit</th>
                                        <th class="text-end">Area code</th>
                                        <th class="text-end">Timestamp</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var sensor in readings)
                                    {
                                        <tr>
                                            <td>@sensor.SensorType</td>
                                            <td class="text-end">@sensor.Value.ToString("0.00")</td>
                                            <td class="text-end">@sensor.Unit</td>
                                            <td class="text-end">@((SensorArea)sensor.Group)</td>
                                            <td class="text-end">@sensor.Timestamp.ToString("g")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div style="width: 200px; background-color:#0c67c9; padding: 35px; display: grid; grid-template-columns: repeat(2, 1fr); grid-gap: 16px; justify-items: center;">

                    @foreach (var kvp in buttons)
                    {
                        var (emoji, label) = kvp.Value;

                        <div style="display: flex; flex-direction: column; align-items: center; gap: 6px;">
                            <button class="btn btn-light"
                                    style="width: 52px; height: 52px; border-radius: 50%; font-size: 24px; display: flex; align-items: center; justify-content: center;">
                                @emoji
                            </button>
                            <span style="color: white; font-size: 0.65rem;">@label</span>

                         
                            <span style="width: 14px; height: 14px; background-color: greenyellow; border-radius: 50%; display: inline-block;"></span>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>


@code {
    private string searchText = "";
    private SearchType selectedSearchType = SearchType.SensorType;
    private readonly SearchType[] searchOptions = Enum.GetValues(typeof(SearchType)).Cast<SearchType>().ToArray();

    private DateTime currentDateTime = DateTime.Now;
    private System.Timers.Timer? timer;

    private Dictionary<Guid, List<SensorDataDto>>? groupedData;

    protected override async Task OnInitializedAsync()
    {
        selectedSearchType = searchOptions[0];

        timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, args) =>
        {
            currentDateTime = DateTime.Now;
            InvokeAsync(StateHasChanged);
        };
        timer.Start();

        var flatData = await _sensorService.GetLatestSensorDataAsync(30);

        groupedData = flatData
            .GroupBy(x => x.GroupId)
            .OrderByDescending(g => g.Max(x => x.Timestamp))
            .ToDictionary(
                g => g.Key,
                g => g.OrderBy(x => x.Timestamp).ToList()
            );
    }
    private Dictionary<int, (string Emoji, string Label)> buttons = new()
    {
        { 1, ("💧", "Water Now") },
        { 2, ("💡", "Toggle Light") },
        { 3, ("📈", "Sensors") },
        { 4, ("📜", "View Logs") },
        { 5, ("🚨", "Alerts") },
        { 6, ("🔄", "Refresh") }
    };
    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }
}


