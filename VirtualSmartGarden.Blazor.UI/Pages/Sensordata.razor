@page "/sensordata"
@using VirtualSmartGarden.Blazor.UI.Dtos
@using VirtualSmartGarden.Blazor.UI.Enums
@using VirtualSmartGarden.Blazor.UI.Interfaces
@inject ISensorDataService _sensorService

<PageTitle>Sensor Data</PageTitle>


@if (groupedData is null)
{
	<div class="spinner-grow text-warning bg-warning ms-2" role="status">
		<span class="visually-hidden">Loading...</span>
		<p class="loading-p">
			<em class="loading-em">Loading...</em>
		</p>
	</div>
}
else
{
	@foreach (var group in groupedData)
	{
		var groupId = group.Key;
		var readings = group.Value;

		<div class="card mb-5 shadow-sm border-primary">
			<div class="card-header bg-dark text-white">
				<div class="d-flex justify-content-between align-items-center">
					<h5 class="mb-0">Group ID: @groupId</h5>
					<span class="text-light small">
						First Reading: @readings.Min(x => x.Timestamp).ToString("f")
					</span>
				</div>
			</div>
			<div class="card-body p-0">
				<table class="table table-striped table-bordered table-hover mb-0">
					<thead class="table-dark">
						<tr>
							<th>Sensor</th>
							<th class="text-end">Value</th>
							<th class="text-end">Unit</th>
							<th class="text-end">Area code</th>
							<th class="text-end">Timestamp</th>

						</tr>
					</thead>
					<tbody>
						@foreach (var sensor in readings)
						{
							<tr>
								<td class="sensor-name">@sensor.SensorType</td>
								<td class="text-end">@sensor.Value.ToString("0.00")</td>
								<td class="text-end">@sensor.Unit</td>
								<td class="text-end">@((SensorArea)sensor.Group)</td>
								<td class="text-end">@sensor.Timestamp.ToString("g")</td>

							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

@code {
	private Dictionary<Guid, List<SensorDataDto>>? groupedData;

	protected override async Task OnInitializedAsync()
	{
		var flatData = await _sensorService.GetAllSensorDataAsync();

		groupedData = flatData
			.GroupBy(x => x.GroupId)
			.OrderBy(g => g.Min(x => x.Timestamp))
			.ToDictionary(
				g => g.Key,
				g => g.OrderBy(x => x.Timestamp).ToList()
			);
	}

}
